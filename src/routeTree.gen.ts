/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RegisterIndexRouteImport } from './routes/register/index'
import { Route as LogoutIndexRouteImport } from './routes/logout/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardTodoIndexRouteImport } from './routes/dashboard/todo/index'
import { Route as DashboardTestIndexRouteImport } from './routes/dashboard/test/index'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterIndexRoute = RegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutIndexRoute = LogoutIndexRouteImport.update({
  id: '/logout/',
  path: '/logout/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardTodoIndexRoute = DashboardTodoIndexRouteImport.update({
  id: '/todo/',
  path: '/todo/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardTestIndexRoute = DashboardTestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/login': typeof LoginIndexRoute
  '/logout': typeof LogoutIndexRoute
  '/register': typeof RegisterIndexRoute
  '/dashboard/test': typeof DashboardTestIndexRoute
  '/dashboard/todo': typeof DashboardTodoIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/login': typeof LoginIndexRoute
  '/logout': typeof LogoutIndexRoute
  '/register': typeof RegisterIndexRoute
  '/dashboard/test': typeof DashboardTestIndexRoute
  '/dashboard/todo': typeof DashboardTodoIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/login/': typeof LoginIndexRoute
  '/logout/': typeof LogoutIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/dashboard/test/': typeof DashboardTestIndexRoute
  '/dashboard/todo/': typeof DashboardTodoIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/'
    | '/login'
    | '/logout'
    | '/register'
    | '/dashboard/test'
    | '/dashboard/todo'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/logout'
    | '/register'
    | '/dashboard/test'
    | '/dashboard/todo'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/'
    | '/login/'
    | '/logout/'
    | '/register/'
    | '/dashboard/test/'
    | '/dashboard/todo/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
  LogoutIndexRoute: typeof LogoutIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout/': {
      id: '/logout/'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/todo/': {
      id: '/dashboard/todo/'
      path: '/todo'
      fullPath: '/dashboard/todo'
      preLoaderRoute: typeof DashboardTodoIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/test/': {
      id: '/dashboard/test/'
      path: '/test'
      fullPath: '/dashboard/test'
      preLoaderRoute: typeof DashboardTestIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardTestIndexRoute: typeof DashboardTestIndexRoute
  DashboardTodoIndexRoute: typeof DashboardTodoIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardTestIndexRoute: DashboardTestIndexRoute,
  DashboardTodoIndexRoute: DashboardTodoIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
  LogoutIndexRoute: LogoutIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
